import { Server } from "socket.io";
import Message from "../entities/message.model";

export const setupChatService = (server: any): Server => {
  // Kh·ªüi t·∫°o server socket.io
  const io = new Server(server, {
    cors: {
      origin: true, // Cho ph√©p m·ªçi ngu·ªìn (c√≥ th·ªÉ t√πy ch·ªânh ƒë·ªÉ b·∫£o m·∫≠t h∆°n)
      credentials: true, // Cho ph√©p g·ª≠i cookie n·∫øu c·∫ßn
    },
  });

  // C·∫•u h√¨nh c√°c s·ª± ki·ªán trong Socket.IO
  io.on('connection', (socket) => {
    console.log('SOCKET IS CONNECTED:', socket.id);

    // X·ª≠ l√Ω s·ª± ki·ªán t·ª´ client
    socket.on('client-message', (data) => {
      console.log('üöÄ Received data:', data);
      switch (data.type) {
        case 'join':
          // Duy·ªát qua c√°c ph√≤ng v√† join v√†o t·ª´ng ph√≤ng
          data.rooms.forEach((room: any) => {
            socket.join(room);
            console.log(`Socket ${socket.id} joined room: ${room}`);

            // Emit th√¥ng tin cho nh·ªØng ng∆∞·ªùi d√πng kh√°c trong ph√≤ng
            io.to(room).emit('server-message', {
              message: `User ${data.name} has joined the room: ${room}`,
              userId: data.userId,
              name: data.name,
              rooms: data.rooms,
            });
          });
          break;

        case 'chat':
          const roomId = data.roomId;  // L·∫•y roomId t·ª´ d·ªØ li·ªáu g·ª≠i t·ªõi

          // G·ª≠i tin nh·∫Øn t·ªõi ph√≤ng c·ª• th·ªÉ
          io.to(roomId).emit('server-message', data);  // Ch·ªâ g·ª≠i t·ªõi ph√≤ng v·ªõi roomId t∆∞∆°ng ·ª©ng
          // L∆∞u tin nh·∫Øn v√†o database
          const message = new Message({
            roomId: data.roomId,
            content: data.message,
            senderId: data.idUser,
            timestamp: data.timestamp,
            nameUser: data.nameUser,
            avatar: data.avatar,

          });

          message.save()
            .then(() => console.log('Message saved successfully'))
            .catch((err: any) => console.error('Failed to save message:', err));
          console.log('Message:', message);
          break;

    
          // X·ª≠ l√Ω c√°c lo·∫°i d·ªØ li·ªáu ƒë·∫∑c bi·ªát kh√°c
          io.emit('server-message', data);
          break;

        default:
          console.warn('Unknown message type:', data.type);
          break;
      }
    });

    // X·ª≠ l√Ω khi client ng·∫Øt k·∫øt n·ªëi
    socket.on('disconnect', () => {
      console.log(`Socket disconnected: ${socket.id}`);
      io.emit('user disconnected', { socketId: socket.id });
    });
  });

  return io; // Tr·∫£ v·ªÅ instance c·ªßa Socket.IO server
};
