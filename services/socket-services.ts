import { Server } from "socket.io";

export const setupChatService = (server: any): Server => {
  // Kh·ªüi t·∫°o server socket.io
  const io = new Server(server, {
    cors: {
      origin: true, // Cho ph√©p m·ªçi ngu·ªìn (c√≥ th·ªÉ t√πy ch·ªânh ƒë·ªÉ b·∫£o m·∫≠t h∆°n)
      credentials: true, // Cho ph√©p g·ª≠i cookie n·∫øu c·∫ßn
    },
  });

  // C·∫•u h√¨nh c√°c s·ª± ki·ªán trong Socket.IO
  io.on('connection', (socket) => {
    console.log('SOCKET IS CONNECTED:', socket.id);

    // X·ª≠ l√Ω s·ª± ki·ªán t·ª´ client
    socket.on('client-message', (data) => {
      console.log('üöÄ Received data:', data);
      switch (data.type) {
        case 'join':
          // X·ª≠ l√Ω tham gia ph√≤ng
          socket.join(data.room); // Th√™m socket v√†o ph√≤ng
          io.to(data.room).emit('server-message', { message: 'Join room is successful' });
          console.log(`Socket ${socket.id} joined room: ${data.room}`);
          break;

        case 'chat':
          // X·ª≠ l√Ω g·ª≠i tin nh·∫Øn trong ph√≤ng
          io.to(data.room).emit('server-message', {
            user: data.user,
            message: data.message,
          });
          break;

        case 'quiz-question':
        case 'quiz-answer':
          // X·ª≠ l√Ω c√°c lo·∫°i d·ªØ li·ªáu ƒë·∫∑c bi·ªát kh√°c
          io.emit('server-message', data);
          break;

        default:
          console.warn('Unknown message type:', data.type);
          break;
      }
    });

    // X·ª≠ l√Ω khi client ng·∫Øt k·∫øt n·ªëi
    socket.on('disconnect', () => {
      console.log(`Socket disconnected: ${socket.id}`);
      io.emit('user disconnected', { socketId: socket.id });
    });
  });

  return io; // Tr·∫£ v·ªÅ instance c·ªßa Socket.IO server
};
